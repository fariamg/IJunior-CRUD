enum Role {
  USER
  ADMIN
}

enum SubscriptionType {
  FREE
  PREMIUM
}

enum Status {
  PENDING
  APPROVED
  REJECTED
  REFUNDED
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id             Int          @id @default(autoincrement())
  fullName       String
  email          String       @unique
  photo          String?
  password       String
  role           Role         @default(USER)
  countryId      Int
  country        Country      @relation(fields: [countryId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  isActive       Boolean      @default(true)
  playlists      Playlist[]   @relation("UserPlaylists")
  collaborations Playlist[]   @relation("PlaylistCollaborators")
  likes          Like[]
  subscription   Subscription?
  payments       Payment[]

  @@map("users")
}

model Artist {
  id        Int       @id @default(autoincrement())
  name      String
  photo     String?
  bio       String?
  listeners Int       @default(0)
  createdAt DateTime  @default(now())
  musics    Music[]
  countryId Int
  country   Country   @relation(fields: [countryId], references: [id])

  @@map("artists")
}

model Music {
  id         Int       @id @default(autoincrement())
  name       String
  duration   Int
  recordDate DateTime
  createdAt  DateTime  @default(now())
  artists    Artist[]
  playlists  Playlist[]
  likes      Like[]
  playCount  Int       @default(0) @map("play_count")  

  @@map("musics")
}

model Country {
  id        Int       @id @default(autoincrement())
  name      String
  continent String
  users     User[]
  artists   Artist[]

  @@map("countries")
}

model Playlist {
  id            Int        @id @default(autoincrement())
  name          String
  musics        Music[]
  creatorId     Int
  creator       User       @relation(fields: [creatorId], references: [id], name: "UserPlaylists")
  collaborators User[]     @relation("PlaylistCollaborators")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("playlists")
}

model Like {
  id       Int      @id @default(autoincrement())
  userId   Int
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  musicId  Int
  music    Music    @relation(fields: [musicId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, musicId]) 
  @@map("likes")
}

model Subscription {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      SubscriptionType
  duration  Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  payments  Payment[]  

  @@map("subscriptions")
}

model Payment {
  id             Int       @id @default(autoincrement())
  userId         Int
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount         Float
  status         Status
  subscriptionId Int?      @unique 
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("payments")
  @@index([status]) 
}
